module lab_7_1(
    input ld,
    //input sel,
    input clk,
   // input read,
    output  reg [31:0] read_data1 , read_data2, read_data3,
    output reg [32:0] C,
    output reg cout,overflow,
    output reg [43:0] preg1,
    output reg [97:0] preg2,
    output reg [75:0] preg3,
    output reg [75:0] preg4,
    output reg [31:0] wr_data
      );
     
    //integer counter<=0;
    reg [16:0] s;
   integer count = 0;
   reg [6:0] sel;
   reg [31:0] wd;
   reg [6:0] op;
    reg [31:0] registers [31:0];
    reg [31:0] icache [7:0];
    reg [31:0] dcache [31:0];
    reg [31:0] inst;
    reg [16:0] A1,B1;
    wire [31:0] add_mux;
    wire [31:0] sub_mux;
    wire [63:0] mul_mux;
    integer i=0;
    reg [31:0] p,g;
    reg [31:0] m1;
    reg [63:0] z ;
    integer t,n,x;
    integer address=0;
   
    initial begin // initialising instructions in IM Cache and DM Cache
          $display("Hello");
          p=0 ;
       icache[0] <= 32'b000000000000_11101_000_11101_0010011;
       icache[1] <= 32'b000000000001_11110_000_11110_0010011;
   
        icache[2] <= 32'b00000000000011101010111000000011;
        icache[3] <= 32'b00000000000011110010110110000011;
   
      icache[4] <= 32'b10000001110011101000010100110011;
   
       icache[5] <= 32'b00000000101011101010000000100011;
       
       registers[29] <= 32'b00000000000000000000000000101101 ;
         registers[30] <= 32'b11111111111111111111111111101100; //11111111111111111111111111101101
       registers[0] <= 0;    
       dcache[29] <= 32'b00000000000000000000000000101101;
       dcache[30] <= 32'b11111111111111111111111111101100;
       dcache[27] <= 32'b0;
       dcache[28] <= 32'b0;
       
    end
   
    always@(posedge clk) begin // decode phase
//         if(x!=0 || address!=3) begin
       
         sel <= icache[address][6:0];
         preg1[6:0] <= icache[address][6:0]; // opcode
         preg1[11:7] <= icache[address][11:7]; // rd
         preg1[14:12] <= icache[address][14:12]; //func3
         preg1[19:15] <= icache[address][19:15];  // rs1
            if(sel == 32'b0010011 || sel == 32'b0000011) begin //rs2
                 preg1[24:20] <= 5'b0;
            end
            else begin
                 preg1[24:20] <= icache[address][24:20];
            end
         preg1[36:25] <= icache[address][31:20]; //imm
        preg1[43:37] <= icache[address][31:25]; //func7
       
        s[6:0] <= icache[address][6:0];  //opcode
        s[9:7] <= icache[address][14:12]; //func3
       
        if(icache[address][6:0]==7'b0110011) begin
            s[16:10] <= icache[address][31:25]; //func7
        end
        else begin
            s[16:10] <= 7'b0000000; //00000000100000011
        end
     
        address = address+1;

     end
   
    always@(posedge clk) begin // register file phase
       
       
            //0100011
      if(address ==5 ) begin
        read_data1<= preg3[31:0] ;
        end
        else begin
      read_data1 <= registers[preg1[19:15]];
      end
        //11101 0000000XXXXXXXXXX 0000000000 00 0000000000 00000000000 0000000000 00 0000000000 0000000000 00000101101
        if(sel==7'b0010011 ) begin //i instruction
            read_data2[11:0] <= preg1[36:25];
            read_data2[31:12] <= 20'b0 ;
             preg2[43:32] <= preg1[36:25]; // 12-bit imm (read_data1)
             preg2[63:44] <= 20'b0 ; // (read_data2)
        end
        else if(sel==7'b0000011 || sel==7'b0100011 ) begin // l/s instruction
            read_data2 <= 0;
             preg2[63:32] <= 0;
        end
        else begin // r instruction
            if( address ==6) begin
            read_data2 <=  preg3[31:0];
             preg2[63:32] <=  preg3[31:0];
            end
            else begin
            read_data2 <= registers[preg1[24:20]];
             preg2[63:32] <= registers[preg1[24:20]]; //
             end
        end
           
        //$display(" %d" ,counter) ;
        preg2[31:0] <= registers[preg1[19:15]];
        preg2[75:64] <= preg1[36:25];
        preg2[92:76] <= s;
        preg2[97:93] <= preg1[11:7];
     
     end
   
    always@(posedge clk) begin // ALU phase
 
        if(preg2[82:76]==7'b0000011 || preg2[82:76]==7'b0100011) begin
             C[0]=1'b0;
                for(i=0;i<32;i=i+1)
                begin
                    p[i]<=read_data1[i]^read_data2[i];
                    g[i]<=read_data1[i]&read_data2[i];
                    C[i+1]=(read_data1[i]&read_data2[i])|((read_data1[i]^read_data2[i])&C[i]);
                    preg3[i]<=(read_data1[i]^read_data2[i])^C[i];
                 end
                cout<=C[31];
                overflow<=read_data1[31]&~read_data2[31]&~C[31]|~read_data1[31]&read_data2[31]&C[31];

        end
        else if(preg2[82:76]==7'b0010011) begin
            case(preg2[85:76])
                10'b0000010011: begin
                     C[0]=1'b0;
                for(i=0;i<32;i=i+1)
                begin
                    p[i]<=read_data1[i]^read_data2[i];
                    g[i]<=read_data1[i]&read_data2[i];
                    C[i+1]=(read_data1[i]&read_data2[i])|((read_data1[i]^read_data2[i])&C[i]);
                    preg3[i]<=(read_data1[i]^read_data2[i])^C[i];
                 end
                cout=C[31];
                overflow<=read_data1[31]&~read_data2[31]&~C[31]|~read_data1[31]&read_data2[31]&C[31];

                end
            endcase
        end
        else begin
        case(preg2[92:76])
           17'b10000000000110011: begin //add
               
         
                C[0]=1'b0;
                for(i=0;i<32;i=i+1)
                begin
                    p[i]<=read_data1[i]^read_data2[i];
                    g[i]<=read_data1[i]&read_data2[i];
                    C[i+1]=(read_data1[i]&read_data2[i])|((read_data1[i]^read_data2[i])&C[i]);
                    preg3[i]<=(read_data1[i]^read_data2[i])^C[i];
                 end
                cout=C[31];
                overflow<=read_data1[31]&~read_data2[31]&~C[31]|~read_data1[31]&read_data2[31]&C[31];
                end
            17'b01000000000110011: begin //sub
                for(i=1;i<32;i=i+1)
                begin
                    C[0]=0;
                    C[i]<=(~read_data1[i-1]&read_data2[i-1])|(~(read_data1[i-1]^read_data2[i-1])&C[i-1]);      
                end
                 cout<=(~read_data1[31]&read_data2[31])|((~read_data1[31]^read_data2[31])&C[31]);
                 preg3[31:0]=read_data1^read_data2^C;
                 overflow = cout^~preg3[31];
            end
            17'b00000010000110011: begin //mul
                z<=32'b0;
                A1<=read_data1[15:0] ;
                B1<=read_data2[15:0];
                z[15:0]=z[15:0]+B1;
                m1=-A1 ;
                for (count=0;count<16;count=count+1) begin
                    if(count==0) begin
                        if(B1[0]==0) begin          
                            t<=z[0];
                            n<=z[31];
                            z<=z>>>1;
                            z[31]=n;    
                        end
                        else begin
                            z[31:16]=z[31:16]+m1;
                            t<=z[0];
                            n<=z[31];
                            z<=z>>>1;
                            z[31]=n;
                        end
                    end
                    if(count>0) begin
                        if(z[0]-t==0)begin
                            t<=z[0];
                            n<=z[31];
                            z<=z>>>1;
                            z[31]=n;
                        end
                        else if(t-z[0]==-1)begin
                            z[31:16]=z[31:16]+m1;                              
                            t<=z[0];
                            n<=z[31];
                            z<=z>>>1;
                            z[31]=n;    
                        end
                        else if(t-z[0]==1)begin
                            z[31:16]=z[31:16]+A1;
                            t<=z[0];
                            n<=z[31];
                            z<=z>>>1;
                            z[31]=n;
                        end
                    end
                end
                preg3[31:0] = z;
            end
        endcase
        end
        //counter = counter+1 ;
        preg3[63:32] <= preg2[63:32];
        preg3[68:64] <= preg2[97:93];
        preg3[75:69] <= preg2[82:76];
       
        //read_data1 <= preg3[31:0];
    end
   
    always@(posedge clk) begin // Data memory phase
 
       
        preg4[63:32] <= preg3[31:0] ;
        if(preg3[75:69]==7'b0100011) begin
            read_data3 <= dcache[preg3[68:64]];
            preg4[31:0] <= dcache[preg3[68:64]];
           
        end
        else begin
            read_data3<=0;
             preg4[31:0] <=0 ;
             dcache[preg3[68:64]] <= preg3[31:0];
             
        end
     
 
   
        preg4[68:64] <= preg3[68:64] ;
        preg4[75:69] <= preg3[75:69] ;
   
    //counter = counter+1;
    end
   
    always@(posedge clk) begin // write back phase
        op <= preg4[75:69];
   
        if(op !=7'b0100011) begin
        registers[preg4[68:64]] <= preg4[63:32] ;
        wr_data <= preg4[63:32] ;
        end
        else begin
                registers[preg4[68:64]] <= preg4[63:32] ;
                 wr_data <= preg4[63:32] ;
            end
    end
endmodule
